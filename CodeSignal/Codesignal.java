void merge(int[] sequence, int left, int middle, int right) {
    int[] result = new int[right - left];
    int i, j;
    int k = 0;
  
    for (i = left, j = middle; i<middle && j<right ; ) {
      if (sequence[i] < sequence[j]) {
        result[k++] = sequence[i];
        i++;
      }
      else {
        result[k++] = sequence[j];
        j++;
      }
    }
  
    while (i < middle) {
      result[k++] = sequence[i];
      i++;
    }
  
    while (j < right) {
      result[k++] = sequence[j];
      j++;
    }
  
    for (i = left; i < right; i++) {
      sequence[i] = result[i - left];
    }
  }
  
  void split(int[] sequence, int left, int right) {
    if (left + 1 == right) {
      return;
    }
    int middle = (left + right) / 2;
    split(sequence, left, middle);
    split(sequence, middle, right);
    merge(sequence, left, middle, right);
  }
  
  int[] mergeSort(int[] sequence) {
    split(sequence, 0, sequence.length);
  
    return sequence;
  }

  
/////////////////////////////////////////

int cubeVolume(int n) {
    int result = 1;
    for (int i = 0; i < 3; i++) {
      result += n;
    }
    return result;
  }

////////////////////////////////////////
String swapCase(String text) {
    String sol = "";
    int diff = 'a'-'A';
    for(char c:text.toCharArray()){
        if(c >='a' && c<='z')
            sol += (char) (c-diff)+"";
        else if(c >='A' && c<='Z')
            sol += (char) (c+diff)+"";
        else
            sol += c+"";
    }
    return sol;
}



////////////////////////////////////////
boolean willYou(boolean young, boolean beautiful, boolean loved) {
    return (young && beautiful && !loved) || (loved &&(!young || !beautiful));
 }
 


////////////////////////////////////////
String properOrImproper(int[] a) {
    if(Math.abs(a[0]/a[1])<1)
        return "Proper";
    return "Improper";
}



////////////////////////////////////////
int houseNumbersSum(int[] inputArray) {
    int sol = 0;
    for(int i = 0; i<inputArray.length; i++){
        if(inputArray[i] == 0)
            break;
        else 
            sol+=inputArray[i];
    }
    return sol;
}



////////////////////////////////////////
Integer arrayConversion(ArrayList<Integer> inputArray) {

    int operation = 1;
    while (inputArray.size() > 1) {
      ArrayList<Integer> newArray = new ArrayList<>();
      for (int i = 0; i < inputArray.size(); i += 2) {
        if (operation % 2 == 1) {
          newArray.add(inputArray.get(i) + inputArray.get(i + 1));
        }
        else {
          newArray.add(inputArray.get(i) * inputArray.get(i + 1));
        }
      }
      inputArray =  newArray;
      operation++;
    }
  
    return inputArray.get(0);
  }
  


////////////////////////////////////////
int pagesNumbering(int n) {

    int tenPower = 1,
        digitsPerPage = 1,
        result = 0;
  
    while (tenPower <= n) {
      result += tenPower * 9 * digitsPerPage;
      tenPower *= 10;
      digitsPerPage++;
    }
    result += (n - tenPower + 1) * (digitsPerPage-1);
  
    return result;
  }
  


////////////////////////////////////////
boolean isIdentityMatrix(int[][] matrix) {

    for (int i = 0; i < matrix.length; i++) {
      for (int j = 0; j < matrix.length; j++) {
        if (matrix[i][j] != 1 && i == j
            || matrix[i][j] != 0 && i != j) {
          return false;
        }
      }
    }
    return true;
  }
  

////////////////////////////////////////
int[] fractionReducing(int[] fraction) {
    int div = Math.min(fraction[0],fraction[1]);
    while(div !=1){
        if(fraction[0]%div == 0 && fraction[1]%div == 0){
            fraction[0]/=div;
            fraction[1]/=div;
            div = Math.min(fraction[0],fraction[1]);
        }
        else
            div--;
    }
    return fraction;
}



////////////////////////////////////////

String properNounCorrection(String noun) {
    return noun.substring(0,1).toUpperCase()+noun.substring(1).toLowerCase();
}


////////////////////////////////////////
int champernowneDigit(int n) {
    String nums = "";
    for(int i = 1; i<1000; i++){
        nums+= i+"";
    }
    return Character.getNumericValue(nums.charAt(n-1));
}


////////////////////////////////////////

String angleType(double measure) {

    if (measure < 90) {
      return "acute";
    }
  
    if (measure == 90) {
      return "right";
    }
  
    if (measure < 180) {
      return "obtuse";
    }
  
    return  "straight" ;
  }
  

////////////////////////////////////////
int binaryPower(int n, int k) {
    final int MOD = (int)1e7 + 7;
  
    if (k == 0) {
      return 1;
    }
    if (k % 2 == 0) {
      return binaryPower((int)((n * 1L * n) % MOD), k / 2);
    }
    return (int)((binaryPower(n, k - 1) * 1L * n) % MOD);
  }
  


////////////////////////////////////////
int binaryPower(int n, int k) {
    final int MOD = (int)1e7 + 7;
  
    if (k == 0) {
      return 1;
    }
    if (k % 2 == 0) {
      return binaryPower((int)((n * 1L * n) % MOD), k / 2);
    }
    return (int)((binaryPower(n, k - 1) * 1L * n) % MOD);
  }
  

////////////////////////////////////////

String truncateString(String s) {
    
    while(true){
        if(s.length()==0) return "";
        if(s.length()>=2 && (Integer.parseInt(s.substring(0,1)) + Integer.parseInt(s.substring(s.length()-1)))%3 == 0){
            s = s.substring(1,s.length()-1);
            System.out.println(s);
        }
        else if(Integer.parseInt(s.substring(0,1)) %3 == 0){
            s = s.substring(1);
            System.out.println(s);
        }
        else if(Integer.parseInt(s.substring(s.length()-1)) %3 == 0){
            s  = s.substring(0,s.length()-1);
            System.out.println(s);
        }
        else return s;
    }
}


////////////////////////////////////////
int lrSegmentNumber(int l, int r) {
    String num = "";
    for(int i = l; i<=r;i++){
        num +=i+"";
    }
    return Integer.parseInt(num);
}



////////////////////////////////////////

String buildPalindrome(String st) {
    String str = new StringBuilder(st).reverse().toString();
    if(str.equals(st)) return st;
    for(int i = 0;i<st.length(); i++ ){
    System.out.println("New String: "+st.substring(0,i)+str);
    if((st.substring(0,i)+str).equals(new StringBuilder((st.substring(0,i)+str)).reverse().toString() ))
    return st.substring(0,i)+str;
    }
    return "lol";
    }
////////////////////////////////////////
boolean chessBoardCellColor(String cell1, String cell2) {
    String alpha = "ABCDEFGH";
    int c1A = alpha.indexOf(cell1.charAt(0))+1;
    int c1N = Integer.parseInt(cell1.substring(1));
    
    int c2A = alpha.indexOf(cell2.charAt(0))+1;
    int c2N = Integer.parseInt(cell2.substring(1));
    
    if((c1A+c1N+c2A+c2N)%2==0)
        return true;
    return false;
    
    
    
}



////////////////////////////////////////
int quasifactorial(int n) {
    int answer = 1;
    for (int i = 2; i <= n; ++i) {
      answer *= i;
      --answer;
    }
    return answer ;
  }
  


////////////////////////////////////////
int firstMultiple2(int[] divisors, int start) {
    int sol = start;
    while(true){
        for(int n:divisors){
            if(sol%n==0)
                return sol;
        }
        sol++;
    }
    
}


////////////////////////////////////////
int crossingSum(int[][] matrix, int row, int column) {

    int result = 0;
    for (int i = 0; i < matrix.length; i++) {
      result += matrix[i][column]  ;
    }
    for (int i = 0; i < matrix[0].length; i++) {
      result += matrix[row][i];
    }
    result -= matrix[row][column];
  
    return result;
  }
  


////////////////////////////////////////
int leastFactorial(int n) {
    int fact = 1;
    for(int i = 1; ;i++){
        fact *=i;
        if(fact>=n)
            return fact;
    
    }
    //return 0;
}



////////////////////////////////////////
int appleBoxes(int k) {
    int odd = 0;
    int eve = 0;
    for(int i = 1; i<=k; i++){
        if(i%2==0)
            eve +=(i*i);
        else
            odd +=(i*i);
    }
    return eve-odd;
}


////////////////////////////////////////
int avoidObstacles(int[] inputArray) {

    Arrays.sort(inputArray);
    
    int sol,i;
    
    for(i = 1; ; i++){
    sol = 0;
    for(int n:inputArray){
    if(n%i==0){
    break;
    }
    else
    sol++;
    }
    if(sol == inputArray.length)
    return i;
    }
    
    }


////////////////////////////////////////

int matrixTrace(int[][] matrix) {
    int sum = 0;
    for(int i = 0; i<matrix.length; i++){
        sum +=matrix[i][i];
    }
    return sum;
}


////////////////////////////////////////
int evenNumbersBeforeFixed(int[] sequence, int fixedElement) {
    int sol = 0;
    for(int i = 0; i<sequence.length; i++){
        
        if(sequence[i] != fixedElement)
        {
            if(sequence[i]%2 == 0)
                sol++;
        }
         else
             return sol;
    
    }
    
    return -1;
}


////////////////////////////////////////
boolean isMonotonous(int[] sequence) {
    int flag = 0;
    if(sequence.length <2) return true;
    for(int i = 1; i<sequence.length; i++){
        if(sequence[i-1] <sequence[i]){
            flag++;
            
        }
        
        else if((sequence[i-1] >sequence[i]))
            flag--;
        else return false;
        
        
    }
    return Math.abs(flag) == sequence.length-1;
}



////////////////////////////////////////
int differentValuesInMultiplicationTable2(int n, int m) {
    HashSet<Integer> hs = new HashSet<Integer>();
    for(int i = 1; i<=n; i++){
        for(int j = 1; j<=m; j++){
            hs.add(i*j);     
        }
    }
    return hs.size();
}



////////////////////////////////////////
int additionWithoutCarrying(int param1, int param2) {
    String sol = "";
    if(param1 ==0 && param2 == 0) return 0;
    while(param1 > 0 || param2 > 0){
            
        //System.out.println((param1%10 + param2%10)%10);
        int last = (param1%10 + param2%10)%10;
        
        sol =last+sol ;
        if(param1>0)
            param1/=10;
        if(param2>0)
            param2/=10;
    }
    System.out.println(sol);
    
    return Integer.parseInt(sol);
    
}


////////////////////////////////////////

boolean increaseNumberRoundness(int n) {
    while(n%10== 0 && n>0)
        n/=10;
    while(n%10 >0 && n>0)
        n/=10;
    return n!=0;
}


////////////////////////////////////////
int rounders(int n) {
    String[] arr = (n+"").split("");
    int len = arr.length;
    for(int i = len-1; i>=1;i--){
        if(Integer.parseInt(arr[i])<5)
            arr[i] = "0" ;
        else{
            arr[i] = "0";
            arr[i-1]  = (Integer.parseInt(arr[i-1]) + 1)+"";
        }
    }
    String sol = "";
    for(String c: arr){
        sol += c+"";
    }
    return Integer.parseInt(sol);
}



////////////////////////////////////////
int candles(int candlesNumber, int makeNew) {
    return candlesNumber + (candlesNumber-1)/(makeNew-1);
}


////////////////////////////////////////

int countBlackCells(int n, int m) {
    int div = 1;
    for(int i = 1; i<=n; i++){
        if(n%i == 0 && m%i==0)
            div = i;
    }
    return n+m+div-2;
        
}



////////////////////////////////////////
int[] arrayReplace(int[] inputArray, int elemToReplace, int substitutionElem) {
    for(int i = 0; i<inputArray.length; i++){
        if(inputArray[i] == elemToReplace)
            inputArray[i] = substitutionElem;
    }
    return inputArray;
}



////////////////////////////////////////
String insertDashes(String inputString) {
    String sol = "";
    if(inputString.length() < 2) return inputString;
    for(char c:inputString.toCharArray()){
        if((c>='a' && c<='z') ||(c>='A' && c<='Z')){
            sol +=c+"-";
        }
        else 
            sol +=c;
    }
    String[] str = sol.split(" ");
    sol = "";
    if(str.length>1){
        for(int i = 0; i<str.length-1;i++){
            sol +=str[i].substring(0,str[i].length()-1)+" ";
        }
        sol+=str[str.length-1].substring(0,str[str.length-1].length()-1);
    }
    return sol;
}


////////////////////////////////////////
boolean isSumOfConsecutive(int n) {
    for(int i = 1; i<=n; i++){
        int sum = 0;
        for(int j = i+1;j<n ; j++){
            sum+=j;
            if(sum == n)
                return true;
        }
    }
    return false;
}



////////////////////////////////////////
int lastDigit(int a, int b) {
    
    int sol = 1;
    while(b>0){
        sol *=a;
        sol %=10;
        b--;
    }
    
    return sol;
}



////////////////////////////////////////
int divNumber(int k, int l, int r) {
    int sol = 0;
    
    for(int i = l; i<=r; i++){
        int count = 0;
        for(int j = 1; j<=i; j++){
            if(i % j == 0)
                count++;
        }
        if(count == k)
            sol++;
    }
    return sol;
}


////////////////////////////////////////
boolean insideCircle(int[] point, int[] center, int radius) {
    System.out.println((int)Math.sqrt((int)Math.pow(point[0]-center[0],2)+(int)Math.pow(point[1]-center[1],2)));
    return (float)Math.sqrt((int)Math.pow(point[0]-center[0],2)+(int)Math.pow(point[1]-center[1],2)) <= radius;
}



////////////////////////////////////////
String replaceFirstDigitRegExp(String input) {
    int index = 0;
    for(char c: input.toCharArray()){
        if(c >='0' && c<='9')
            break;
         index++;   
    }
    return input.substring(0,index) +"#"+input.substring(index+1);
}



////////////////////////////////////////
int gcdNaive(int a, int b) {

    int gcd = 1;
    for (int divisor = 2; divisor <= Math.min(a, b); divisor++) {
      if (a % divisor == 0 && b % divisor == 0) {
        gcd = divisor;
      }
    }
  
  
    return gcd;
  }
  

////////////////////////////////////////
int countInversionsNaive(int[] inputArray) {
    int sol = 0;
    for(int i = 0; i<inputArray.length-1;i++){
        for(int j = i+1; j<inputArray.length; j++){
            if(inputArray[i]>inputArray[j])
                sol++;
        }
    }
    return sol;
    
}



////////////////////////////////////////
int[] fractionMultiplication(int[] a, int[] b) {
    int[] fraction = {a[0]*b[0], a[1]*b[1]};
    int div = Math.min(fraction[0],fraction[1]);
    while(div !=1){
        if(fraction[0]%div == 0 && fraction[1]%div == 0){
            fraction[0]/=div;
            fraction[1]/=div;
            div = Math.min(fraction[0],fraction[1]);
        }
        else
            div--;
    }
    return fraction;
}



////////////////////////////////////////
boolean charactersRearrangement(String string1, String string2) {
    if(string1.length() != string2.length()) return false;
    char[] s1 = string1.toCharArray();
    char[] s2 = string2.toCharArray();
    Arrays.sort(s1);
    Arrays.sort(s2);
    
    for(int i = 0; i<s1.length; i++){
        if(s1[i] !=s2[i])
            return false;
    }
    
    return true;
        
}


////////////////////////////////////////

int[] firstReverseTry(int[] arr) { 
    if(arr.length <2) return arr;
    int temp = arr[0];
    arr[0] = arr[arr.length-1];
    arr[arr.length-1] = temp;
    return arr;
}


////////////////////////////////////////
int[] concatenateArrays(int[] a, int[] b) {
    int[] sol = new int[a.length + b.length];
    int i;
    for(i = 0; i<a.length; i++){
        sol[i] = a[i];
    }
    
    for(int j = 0; j<b.length; j++){
        sol[i] = b[j];
        i++;
    }
    return sol;
}



////////////////////////////////////////
int[] removeArrayPart(int[] inputArray, int l, int r) {
    int[] sol = new int[inputArray.length - (r - l +1) ];
    for(int i = 0, j = 0; i<inputArray.length; i++){
        if( i < l || i>r ){
            sol[j] = inputArray[i];
            j++;
        }
    }
    return sol;
    
}


////////////////////////////////////////
boolean isSmooth(int[] arr) {
    //if(arr.length <2) return true;
    
    if(arr.length %2 == 0)
        return arr[0] == arr[arr.length-1] && arr[arr.length-1] == (arr[arr.length/2]+arr[arr.length/2 - 1]);
    else 
        return arr[0] == arr[arr.length-1] && arr[arr.length-1] == arr[arr.length/2]; 
    
}



////////////////////////////////////////
int[] replaceMiddle(int[] arr) {
    if(arr.length%2 == 0){
        int[] sol = new int[arr.length-1];        
        for(int i = 0, j = 0; i<arr.length; j++){
            if(i == arr.length/2 -1){
                sol[j] = arr[arr.length/2] +arr[arr.length/2-1];
                i+=2;
            }
            else{
                sol[j] = arr[i];
                i++;
            }
        }
        return sol;
            
    }
    return arr;
        
    
}



////////////////////////////////////////
int makeArrayConsecutive2(int[] statues) {
    Arrays.sort(statues);
    HashSet<Integer> hs = new HashSet<Integer>();
    for(int num:statues){
        hs.add(num);
    }
    int sol = 0;
    for(int i = statues[0]+1 ; i<statues[statues.length-1];i++){
        if(hs.add(i))
            sol++;
    }
    return sol;
}


////////////////////////////////////////
String buildPalindrome(String st) {
    String str = new StringBuilder(st).reverse().toString();
if(str.equals(st)) return st;
for(int i = 0;i<st.length(); i++ ){
System.out.println("New String: "+st.substring(0,i)+str);
if((st.substring(0,i)+str).equals(new StringBuilder((st.substring(0,i)+str)).reverse().toString() ))
return st.substring(0,i)+str;
}
return "";
}



////////////////////////////////////////

int largestDistance(int[] a) {

    int[] mx = new int[] {a[0], a[1]};
    int[] mn =  new int[] {a[a.length-2], a[a.length-1]} ;
    for (int i = 0; i < a.length; i++) {
      int k = i % 2;
      if (a[i] > mx[k]) {
        mx[k] = a[i];
      } else if (a[i] < mn[k]) {
        mn[k] = a[i];
      }
    }
    return Math.max(mx[0] - mn[0], mx[1] - mn[1]);
  }
  

////////////////////////////////////////

boolean isInRange(int a, int b, int c) {
    return b>=a && b<=c;
}

////////////////////////////////////////
String caesarBoxCipherEncoding(String inputString) {
    int n = (int)Math.sqrt(inputString.length());
    String sol = "";
    for(int i = 0; i<n;i++){
        for(int j = i; j<inputString.length(); j+=n){
            sol += inputString.charAt(j)+"";
        }
    }
    return sol;
}



////////////////////////////////////////
int sumOfMultiples(int n, int k) {
    int sum = 0;
    for(int i  = 1; ; i++ ){
        if(i*k <=n)
            sum +=(i*k);
        else 
            break;
    }
    return sum;
}



////////////////////////////////////////
int differentSubstringsTrie(String inputString) {

    class Helper {
      void addNode(ArrayList<int[]> lastVersion) {
        int[] line = new int[26];
        lastVersion.add(line);
      }
    }
    Helper h = new Helper();
  
    int nodesCount = 1;
    ArrayList<int[]> trie = new ArrayList<>();
    h.addNode(trie);
  
    for (int i = 0; i < inputString.length(); i++) {
      int currentNode = 0;
      for (int j = i; j < inputString.length(); j++) {
        int symbol = inputString.charAt(j) - 'a';
        if (trie.get(currentNode)[symbol] == 0) {
          h.addNode(trie);
          trie.get(currentNode)[symbol] = nodesCount;
          nodesCount++;
        }
        currentNode = trie.get(currentNode)[symbol];
      }
    }
  
    return nodesCount-1;
  }
  

////////////////////////////////////////
boolean isPower(int n) {
    int power = 2;
    while(power<(n)){
        System.out.println((Math.pow(n,1.0/power)));
        if(n == (int)Math.pow((int)Math.ceil(Math.pow(n,1.0/power)),power))
            return true;
        power++;
    }
    return n<2;
}



////////////////////////////////////////
int isSumOfConsecutive2(int n) {
    int sol = 0;
    for(int i = 1; i<n; i++){
        int sum = i;
        for(int j = i+1;j<n ; j++){
            sum+=j;
            if(sum == n)
                sol++;
        }
    }
    return sol;
}

//1 2 3 4 5 6 7 8 


////////////////////////////////////////
int squareDigitsSequence(int a0) {
    
    ArrayList<Integer> list = new ArrayList<Integer>();
    int sol = 0;
    list.add(a0);
    while(true){
        int sum = 0;
        while(a0!=0){
            //System.out.println(a0%10 * a0%10);
            sum += (a0%10) * (a0%10);
            a0 /=10;
        }
        System.out.println(sum);
        if(list.contains(sum))
            break;
        else 
            list.add(sum);
        a0 = sum;
        sol++;
    }
       
    
    return sol+2;
}


////////////////////////////////////////

int pagesNumberingWithInk(int current, int numberOfDigits) {
    String numbers="";
    int count = 0;
    for(int i = current;  ; i++){
        numbers += i+"";
        if(numbers.length()>numberOfDigits)
            break;
        count = i;        
    }
    return count;
}


////////////////////////////////////////
int[] easyAssignmentProblem(int[][] skills) {
    
    if (skills[0][0] + skills[1][1] > skills[0][1] + skills[1][0]){
        int[] sol = {1, 2};
        return sol;
    }
       int[] sol = {2, 1};
        return sol;
}



////////////////////////////////////////
def permutationShift(permutation):
    
    s = []
    for i, e in enumerate(permutation):
        s.append(e-i)
    return max(s) - min(s)

////////////////////////////////////////
int commonCharacterCount(String s1, String s2) {
    int sol = 0;
    for(char c: s1.toCharArray()){
        if(s2.replaceFirst(c+"","").length() != s2.length()){
            s2 = s2.replaceFirst(c+"","");
            sol++;
        }
        s1 = s1.replaceFirst(c+"","");
    }
    return sol;
}



////////////////////////////////////////
String integerToStringOfFixedWidth(int number, int width) {
    String num = number+"";
    if(num.length()>width)
        return num.substring(num.length() - width);
    if(num.length()<width){
        while(num.length() != width)
            num = "0"+num;
        return num;
    }
    return num;
}



////////////////////////////////////////
int fibonacciIndex(int n) {

    int a = 0;
    int b = 1;
    int i = 1;
    while (String.valueOf(a).length() < n) {
      int c = a + b;
      a = b;
      b = c;
      i++;
    }
    return i;
  }
  

////////////////////////////////////////
int minimalNumberOfCoins(int[] coins, int price) {
    int sol = 0;
    for(int i = coins.length - 1; i>=0; i--){
        sol += price/coins[i];
        price %=coins[i];
    }
    return sol;
}



////////////////////////////////////////

int candies(int n, int m) {
    return n*(m/n);
}


////////////////////////////////////////
int specialPolynomial(int x, int n) {
    int k = 0;
    int sum = 0;
    while(true){
        sum += (int)Math.pow(x,k);
        if(sum>n)
            return k-1;
        k++;
    }
}


////////////////////////////////////////
int largestFullBinaryTree(int[] parent) {

    class Graph {
      ArrayList<Integer>[] edges;
      int maxBinTree;
  
      Graph(int[] parent) {
        maxBinTree = 1;
        edges = new ArrayList[parent.length];
        for (int i = 0; i < edges.length; i++) {
          edges[i] = new ArrayList();
        }
        for (int i = 1; i < parent.length; i++) {
          edges[parent[i]].add(i);
        }
      }
  
      int dfs(int v) {
        int firstMax = -1;
        int secondMax = -1;
        for (int u : edges[v]) {
          int curMax = dfs(u);
          if (curMax > firstMax) {
            secondMax = firstMax;
            firstMax = curMax;
          } else if (curMax > secondMax) {
            secondMax = curMax;
          }
        }
        if (secondMax == -1) {
          return 1;
        }
        int result = 1 + firstMax + secondMax;
        if (result > maxBinTree) {
          maxBinTree = result;
        }
        return result;
      }
    }
  
    Graph g = new Graph(parent);
    g.dfs(0);
    return g.maxBinTree;
  }
  


////////////////////////////////////////
boolean sulkyBoy(boolean statement) {
    boolean boys_statement = !statement;
    return statement;
  }
  


////////////////////////////////////////
int[] arrayComplexElementsProduct(int[] real, int[] imag) {

    int[] answer = {real[0], imag[0]};
    for (int i = 1; i < real.length; i++) {
      int tmp = answer[0] * real[i]  - answer[1] * imag[i];
      answer[1] = answer[1] * real[i] + answer[0] * imag[i];
      answer[0] = tmp;
    }
    return answer;
  }
  

////////////////////////////////////////

int extraNumber(int a, int b, int c) {
    if(a == b)
        return c;
    if(a==c)
        return b;
    return a;
}


////////////////////////////////////////
boolean isTandemRepeat(String inputString) {
    System.out.println(inputString.substring(0,inputString.length()/2));
    System.out.println(inputString.substring(inputString.length()/2));
    return inputString.substring(0,inputString.length()/2).equals(inputString.substring(inputString.length()/2));
}



////////////////////////////////////////

String myConcat(String[] strings, String separator) {
    String sol = "";
    for(String s: strings){
        sol += s+separator;
    }
    return sol;
}

////////////////////////////////////////
int axisAlignedBoundingBox(int[] x, int[] y) {

    int minX = x[0],
        maxX = x[0],
        minY = y[0],
        maxY = y[0];
  
    for (int i = 1; i < x.length; i++) {
      minX = Math.min(x[i], minX);
      maxX = Math.max(x[i], maxX);
      minY = Math.min(y[i], minY);
      maxY = Math.max(y[i], maxY);
    }
  
    return (maxX - minX) * (maxY - minY);
  }
  


////////////////////////////////////////
boolean isLuckyNumber(int n) {
    while (n > 0) {
      int tmpDigit = n % 10;
      if ( tmpDigit !=4 && tmpDigit !=7 ) {
        return false;
      }
      n = n / 10;
    }
    return true;
  }
  


////////////////////////////////////////
int numberOfEvenDigits(int n) {
    int sol = 0;
    while(n>0){
        if((n%10)%2==0)
            sol++;
        n/=10;
    }
    return sol;
}


////////////////////////////////////////
boolean checkFactorial(int n) {

    for (int divisor = 2; n != 1; divisor++) {
      if (n % divisor == 0) {
        n /= divisor;
      } else {
        return  false ;
      }
    }
    return true;
  }
  


////////////////////////////////////////

int[] primeFactors2(int n) {
    int[] prime = {2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97, 101, 103, 107, 109, 113, 127, 131, 137, 139, 149, 151, 157, 163, 167};
    ArrayList<Integer> list = new ArrayList<Integer>();
    for(int i = 0; prime[i]<n;i++){
        if(n%prime[i] == 0){
            list.add(prime[i]);
        }
    }
    int[] sol = new int[list.size()];
    int k = 0;
    for(int num: list)
    {
        sol[k] = num;
        k++;
    }
    return sol;
    
}



////////////////////////////////////////
int numberOfEvenDigits(int n) {
    int sol = 0;
    while(n>0){
        if((n%10)%2==0)
            sol++;
        n/=10;
    }
    return sol;
}


////////////////////////////////////////
boolean passwordCheckRegExp(String inputString) {
    
    if(inputString.length()>=5)
        if(inputString.replaceAll("[a-z]","").length() != inputString.length())
            if(inputString.replaceAll("[A-Z]","").length() != inputString.length())
                if(inputString.replaceAll("[0-9]","").length() != inputString.length())
                    return true;
        
    return false;
}



////////////////////////////////////////

int halvingSum(int n) {
    int sum = n;
    while(n>0){
        sum += n/2;
        n/=2;
    }
    return sum;
}


////////////////////////////////////////
boolean arithmeticExpression(int a, int b, int c) {
    return (a+b == c)|| (a-b == c)||(a*b == c)||((float)a/b == c);
}


////////////////////////////////////////
boolean isDiagonalMatrix(int[][] matrix) {
    for(int i = 0; i<matrix.length; i++){
        for(int j = 0; j<matrix[0].length; j++){
            if(j!=i){
                if(matrix[i][j] != 0)
                    return false;
            }
        }
    }
    return true;
}



////////////////////////////////////////
int[] onlyEvenNumbers(int left, int right) {
    ArrayList<Integer> result = new ArrayList<>();
    for (int i = left; i <= right; i++) {
      if (i % 2 == 0) {
        result.add(i);
      }
    }
  
    int[] array = new int[result.size()];
    for (int i = 0; i < array.length; ++i) {
      array[i] = result.get(i);
    }
    return array;
  }
  


////////////////////////////////////////
boolean higherVersion(String ver1, String ver2) {
    String[] v1 = ver1.split("\\.");
    String[] v2 = ver2.split("\\.");
    for(int i = 0; i<v1.length; i++){
        if(Integer.parseInt(v1[i]) > Integer.parseInt(v2[i]) )
            return true;
        if(Integer.parseInt(v1[i]) < Integer.parseInt(v2[i]) )
            return false;
    }
    return false;
}


////////////////////////////////////////
int swapNeighbouringDigits(int n) {
    String sol = "";
    char[] arr= (n+"").toCharArray();
    
    for(int i = 1; i<arr.length; i+=2){
        sol += (arr[i]+""+arr[i-1])+"";
    }
    return Integer.parseInt(sol.trim());
}



////////////////////////////////////////
int seatsInTheater(int nCols, int nRows, int col, int row) {
    return (nRows-row)*(nCols - col +1);
}



////////////////////////////////////////
int lrSegmentNumber(int l, int r) {
    String sol = "";
    for(int i = l; i<=r; i++){
        sol += i+"";
    }
    return Integer.parseInt(sol);
}


////////////////////////////////////////
int visitsOnCircularRoad(int n, int[] visitsOrder) {

    int current = 1,
        res = 0;
    for (int i = 0; i < visitsOrder.length; i++) {
      res += Math.min(Math.abs(visitsOrder[i] - current),
          n - Math.abs(visitsOrder[i] - current));
      visitsOrder[i] = current;
    }
    return res;
  }
  


////////////////////////////////////////
int summaryProficiency(int[] a, int n, int m) {
    int sum = 0;
    for(int i = 0; i<a.length; i++){
        if(n == 0) break;
        if(a[i] >= m){
            sum +=a[i];
            n--;
        }
    }
    return sum;
}



////////////////////////////////////////
int rectangleRotation(int a, int b) {
    a=(int)(a/Math.sqrt(2));
    b=(int)(b/Math.sqrt(2));
    int c = (a+1)*(b+1)+a*b;
    return c%2==0?c-1:c;
}


////////////////////////////////////////
int crosswordFormation(String[] words) {
    int t = 0;
 if(words[0]==null||words[1]==null||words[2]==null||words[3]==null) return 0;
for (int i = 0; i < words.length; i++)
    for (int j = 0; j < words.length; j++)
        for (int k = 0; k < words.length; k++)
            for (int l = 0; l < words.length; l++)
                if (i != j && i != k && i != l && 
                    j != k && j != l && k != l)
                    t+=get(words[i],words[j],words[k],words[l]);
return t;
}

 private int get(String s1, String s2, String s3, String s4) {
    // TODO Auto-generated method stub
    int kq = 0;
     
    int ls1 = s1.length();
    int ls2 = s2.length();
    int ls3 = s3.length();
    int ls4 = s4.length();
    for (int i = 0; i < ls1; i++) {
        for (int j = 0; j < ls2 ; j++) {
            if (s1.charAt(i) == s2.charAt(j)) {
               // System.out.println(s1.charAt(i));
                for (int j2 = j+2; j2 < ls2  ; j2++) {
                    for (int k = 0; k < ls3; k++) {
                        if (s2.charAt(j2) == s3.charAt(k)) {
                            for (int k2 = k+2; k2 < ls3 ; k2++) {
                                for (int l2 = ls4-1; l2 >-1 ; l2--) {
                                    if (s3.charAt(k2) == s4.charAt(l2)) {
                                        int p4 = l2 - j2 + j;
                                        int p1 = i + k2 - k;
                                        if(p4>-1&&p4<ls4&&p1<ls1&&p1>-1)
                                            if (s4.charAt(p4) == s1.charAt(p1))
                                            {
                                             //   System.out.println(i+" "+j2 +" "+k2+" "+p4);
                                                kq++;
                                            }
                                    }

                                }
                            }
                        }
                    }
                }
            }
        }
    }

    return kq;
}


////////////////////////////////////////
String reduceString(String inputString) {
    while(true){
        if(inputString.length() <= 1) return "";
        if(inputString.charAt(0) == inputString.charAt(inputString.length()-1) && inputString.length()>2)
            inputString = inputString.substring(1,inputString.length()-1);
        else 
            return inputString;
    }
    
}



////////////////////////////////////////
int[][] constructSubmatrix(int[][] matrix,
                           int[] rowsToDelete,
                           int[] columnsToDelete) {
  int newRowsLength = matrix.length - rowsToDelete.length;
  int newColumnsLength = matrix[0].length - columnsToDelete.length;
  int[][] res = new int[newRowsLength][newColumnsLength];
  boolean[] useRow = new boolean[matrix.length];
  boolean[] useColumn = new boolean[matrix[0].length];
  Arrays.fill(useRow, true);
  Arrays.fill(useColumn, true);

  for (int i = 0; i < rowsToDelete.length; i++) {
    useRow[rowsToDelete[i]] = false;
  }
  for (int i = 0; i < columnsToDelete.length; i++) {
    useColumn[columnsToDelete[i]] = false;
  }

  for (int i = 0, i2 = 0; i < matrix.length; i++) {
    if (useRow[i]) {
      for (int j = 0, j2 = 0; j < matrix[0].length; j++) {
        if (useColumn[j]) {
          res[ i2 ][j2++] = matrix[i][j];
        }
      }
      i2++;
    }
  }

  return res;
}


////////////////////////////////////////
int[] alternatingSums(int[] a) {
    int odd = 0;
    int eve = 0;
    for(int i = 0; i<a.length; i++){
        if(i%2==0)
            eve +=a[i];
        else
            odd+=a[i];
    }
    int[] sol = {eve,odd};
    return sol;
}



////////////////////////////////////////
int digitsProduct(int product) {
    if(isPrime(product)) return -1;
    for(int i = product; ; i++){
        int ml = 1;
        int num = i;
        while(num!=0){
            ml *= num%10;
            num/=10;
        }
        System.out.println(ml+" "+i);
        if(ml == product)
            return i;
    }
}
boolean isPrime(int n){
    if(n==2) return true;
    if(n==0 || n==1) return false;
    for(int i = 2; i<=n/2+1; i++){
        if(n%i == 0)
            return false;
    }
    return true;
}



////////////////////////////////////////
int createAnagram(String s, String t) {

    int[] cnt1 = new int[26];
    int[] cnt2 = new int[26];
    for (int i = 0; i < s.length(); i++) {
      cnt1[s.charAt(i) - 'A']++;
      cnt2[t.charAt(i) - 'A']++;
    }
  
    int ans = 0;
    for (int i = 0; i < 26; i++) {
      ans += Math.abs(cnt1[i] - cnt2[i]);
    }
  
    return ans/2;
  }
  

////////////////////////////////////////
String[] sortByLength(String[] inputArray) {
    Arrays.sort(inputArray, new Comparator<String>(){
            public int compare(String s1, String s2){
                return s1.length() - s2.length();
            }
        });
    return inputArray;
}



////////////////////////////////////////
ArrayList<Integer> arrayCenter(ArrayList<Integer> a) {

    int n = a.size();
    int suma = a.get(0),
        mina = suma;
    for (int i = 1; i < n; i++) {
      suma += a.get(i);
      mina = Math.min(mina, a.get(i));
    }
  
    ArrayList<Integer> b = new ArrayList<>();
    for (int i = 0; i < n; i++) {
      if (Math.abs(n * a.get(i) - suma) < n * mina) {
        b.add(a.get(i));
      }
    }
  
    return b;
  }
  


////////////////////////////////////////
int depositProfit(int deposit, int rate, int threshold) {
    double grow = 1 + rate / 100.0;
    int year = (int)(Math.log((double)threshold / deposit) / Math.log(grow));
    if (deposit * Math.pow(grow, year) < threshold) {
      year++;
    }
    return year;
  }

////////////////////////////////////////
int countSumOfTwoRepresentations3(int n, int l, int r) {
    ArrayList<Integer> list = new ArrayList<Integer>();
    for(int i = l; i<=r; i++){
        list.add(i);
    }
    int sol=0;
    for(int num:list){
        if(Math.abs(num-n)>=num){
            if(list.contains(Math.abs(num-n)))
                sol++;
        }
    }
    return sol;
}
////////////////////////////////////////
int countSumOfTwoRepresentations3(int n, int l, int r) {
    int res {};
    for (int i = 0; i <= 1000000; ++i) {
        if (l <=  n - i && n - i <= r && n - i <= i && l <= i && i <= r) {
            res++;
        }
    }
    return res;
}



////////////////////////////////////////
int chessKnight(String cell) {
    int row =  cell.charAt(1)-'1'+1 ,
        column = cell.charAt(0) - 'a' + 1;
    int[][] steps = {
        {-2, -1}, {-1, -2}, {1, -2}, {2, -1},
        {2, 1}, {1, 2}, {-1, 2}, {-2, 1}
    };
    int answer = 0;
  
    for (int i = 0; i < steps.length; i++) {
      int tmpRow = row + steps[i][0];
      int tmpColumn = column + steps[i][1];
      if (tmpRow >= 1 && tmpRow <= 8 &&
          tmpColumn >= 1 && tmpColumn <= 8) {
        answer++;
      }
    }
  
    return answer;
  }
  


////////////////////////////////////////
int[][] create2DArray(int[] lengths) {

    int[][] result = new int[lengths.length][];
  
    for (int i = 0; i < lengths.length; i++) {
      result[i] = new int[lengths[i]];
      for (int j = 0; j < lengths[i]; j++) {
        result[i][j] = j;
      }
    }
  
    return result;
  }
  

////////////////////////////////////////
int[] improperFractionToMixed(int[] a) {

    int[] b = {a[0] / a[1], 0, 0};
    b[1] = a[0] - a[1] * b[0];
    b[2] = a[1];
  
    return b;
  }
  


////////////////////////////////////////

int arrayMaximalAdjacentDifference(int[] inputArray) {
    int diff = 0;
    for(int i = 1; i<inputArray.length;i++){
        if(diff < Math.abs(inputArray[i-1] - inputArray[i]))
            diff = Math.abs(inputArray[i-1] - inputArray[i]); 
    }
    return diff;
}


////////////////////////////////////////
int largestNumber(int n) {
    String sol = "";
    for(int i = 0; i<n; i++){
        sol += "9";
    }
    return Integer.parseInt(sol);
}


////////////////////////////////////////
String longestWord(String text) {
    String[] str = text.split(" ");
    String sol = "";
    int len = 0;
    for(String s: str){
        s = s.replaceAll("[^a-zA-Z]","");
        if(s.length()> len)
        {
            len = s.length();
            sol = s;
        }   
    }
    return sol;
}



////////////////////////////////////////
boolean isCorrectSentence(String inputString) {
    if(inputString.charAt(0)>= 'A' && inputString.charAt(0)<= 'Z' )
        if(inputString.substring(inputString.length()-1).equals("."))
            return true;
    return false;
}



////////////////////////////////////////
int zigzag(int[] a) {

    int best = 1;
    int left = 0;
    while (left < a.length) {
      int right = left+1  ;
      while (right < a.length) {
        if (right == left + 1) {
          if (a[left] == a[right]) {
            break;
          }
        } else {
          if ((a[right - 1] - a[right - 2]) * (a[right - 1] - a[right]) <= 0) {
            break;
          }
        }
        right++;
      }
      best = Math.max(best, right - left);
      left = right;
      if (left < a.length && a[left - 1] != a[left]) {
        left--;
      }
    }
  
    return best;
  }
  

////////////////////////////////////////
int countLineColorings(int points, int colors) {
    int result = colors;
    for (int i = 1; i < points; i++) {
      result *= colors - 1;
    }
    return result;
  }
  


////////////////////////////////////////
int countInversionsNaive(int[] inputArray) {

    int result = 0;
  
    for (int i = 0; i < inputArray.length; i++) {
      for (int j = i + 1; j < inputArray.length; j++) {
        if (inputArray[j] < inputArray[i]) {
          result++;
        }
      }
    }
    return result;
  }
  


////////////////////////////////////////
int leastCommonPrimeDivisor(int a, int b) {

    for (int divisor = 2; a > 1 && b > 1; divisor++) {
      if (a % divisor == 0 && b % divisor == 0) {
        return divisor;
      }
      while (a % divisor == 0) {
        a /=  divisor ;
      }
      while (b % divisor == 0) {
        b /= divisor;
      }
    }
  
    return -1;
  }
  

////////////////////////////////////////

String removeAdjacent(String s) {

    if (s.equals("")) {
      return "";
    }
  
    StringBuilder ans = new StringBuilder();
    ans.append(s.charAt(0));
    for (int i = 1; i < s.length(); i++) {
      if (s.charAt(i) != s.charAt(i - 1)) {
        ans.append(s.charAt(i));
      }
    }
  
    return ans.toString();
  }
  

////////////////////////////////////////
void merge(int[] sequence, int left, int middle, int right) {
    int[] result = new int[right - left];
    int i, j;
    int k = 0;
  
    for (i = left, j = middle; i < middle && j < right; ) {
      if (sequence[i] < sequence[j]) {
        result[k++] = sequence[i];
        i++;
      }
      else {
        result[k++] = sequence[j];
        j++;
      }
    }
  
    while (i < middle) {
      result[k++] = sequence[i];
      i++;
    }
  
    while (j < right) {
      result[k++] = sequence[j];
      j++;
    }
  
    for (i = left; i < right; i++) {
      sequence[i] = result[i - left];
    }
  }
  
  void split(int[] sequence, int left, int right) {
    if (left + 1 == right) {
      return;
    }
    int middle = (left + right) / 2;
    split(sequence, left, middle);
    split(sequence, middle, right);
    merge(sequence, left, middle, right);
  }
  
  int[] mergeSort(int[] sequence) {
    split(sequence, 0, sequence.length);
  
    return sequence;
  }
  


////////////////////////////////////////
int largestFullBinaryTree(int[] parent) {

    class Graph {
      ArrayList<Integer>[] edges;
      int maxBinTree;
  
      Graph(int[] parent) {
        maxBinTree = 1;
        edges = new ArrayList[parent.length];
        for (int i = 0; i < edges.length; i++) {
          edges[i] = new ArrayList();
        }
        for (int i = 1; i < parent.length; i++) {
          edges[parent[i]].add(i);
        }
      }
  
      int dfs(int v) {
        int firstMax = -1;
        int secondMax = -1;
        for (int u : edges[v]) {
          int curMax = dfs(u);
          if (curMax > firstMax) {
            secondMax = firstMax;
            firstMax = curMax;
          } else if (curMax > secondMax) {
            secondMax = curMax;
          }
        }
        if (secondMax == -1) {
          return 1;
        }
        int result = 1 + firstMax + secondMax;
        if (result > maxBinTree) {
          maxBinTree = result;
        }
        return result;
      }
    }
  
    Graph g = new Graph(parent);
    g.dfs(0);
    return g.maxBinTree;
  }
  

////////////////////////////////////////
String oneTwoMany(int n) {
    if(n == 1)
        return "one";
    if(n == 2)
        return "two";
    return "many";
}



////////////////////////////////////////

String longestDigitsPrefix(String inputString) {
    
    String sol ="";
    
    if(Character.isDigit(inputString.charAt(0))){
            
        for(char c: inputString.toCharArray()){
            if(Character.isDigit(c))
                sol +=(c+"");
            else break;
        }
        
    }
    return sol;
}


////////////////////////////////////////


////////////////////////////////////////



////////////////////////////////////////



////////////////////////////////////////


////////////////////////////////////////



////////////////////////////////////////



////////////////////////////////////////


////////////////////////////////////////



////////////////////////////////////////



////////////////////////////////////////


////////////////////////////////////////



////////////////////////////////////////



////////////////////////////////////////


////////////////////////////////////////



////////////////////////////////////////



////////////////////////////////////////


////////////////////////////////////////



////////////////////////////////////////



////////////////////////////////////////


////////////////////////////////////////



////////////////////////////////////////



////////////////////////////////////////


////////////////////////////////////////



////////////////////////////////////////



////////////////////////////////////////


////////////////////////////////////////



////////////////////////////////////////



////////////////////////////////////////


////////////////////////////////////////



////////////////////////////////////////



////////////////////////////////////////


////////////////////////////////////////



////////////////////////////////////////



////////////////////////////////////////


////////////////////////////////////////



////////////////////////////////////////



////////////////////////////////////////


////////////////////////////////////////



////////////////////////////////////////



////////////////////////////////////////


////////////////////////////////////////



////////////////////////////////////////



////////////////////////////////////////


////////////////////////////////////////



////////////////////////////////////////



////////////////////////////////////////


////////////////////////////////////////



////////////////////////////////////////



////////////////////////////////////////


////////////////////////////////////////



////////////////////////////////////////



////////////////////////////////////////


////////////////////////////////////////



////////////////////////////////////////



////////////////////////////////////////


////////////////////////////////////////



////////////////////////////////////////



////////////////////////////////////////


////////////////////////////////////////



////////////////////////////////////////



////////////////////////////////////////


////////////////////////////////////////



////////////////////////////////////////



////////////////////////////////////////


////////////////////////////////////////



////////////////////////////////////////



////////////////////////////////////////


////////////////////////////////////////



////////////////////////////////////////



////////////////////////////////////////


////////////////////////////////////////



////////////////////////////////////////



////////////////////////////////////////


////////////////////////////////////////



////////////////////////////////////////



////////////////////////////////////////


////////////////////////////////////////



////////////////////////////////////////



////////////////////////////////////////


////////////////////////////////////////



////////////////////////////////////////



////////////////////////////////////////


////////////////////////////////////////



////////////////////////////////////////



////////////////////////////////////////


////////////////////////////////////////



////////////////////////////////////////



////////////////////////////////////////


////////////////////////////////////////



////////////////////////////////////////



////////////////////////////////////////


////////////////////////////////////////



////////////////////////////////////////



////////////////////////////////////////


////////////////////////////////////////



////////////////////////////////////////



////////////////////////////////////////


////////////////////////////////////////



////////////////////////////////////////



////////////////////////////////////////


////////////////////////////////////////



////////////////////////////////////////



////////////////////////////////////////


////////////////////////////////////////



////////////////////////////////////////



////////////////////////////////////////


////////////////////////////////////////



////////////////////////////////////////



////////////////////////////////////////


////////////////////////////////////////



////////////////////////////////////////



////////////////////////////////////////


////////////////////////////////////////



////////////////////////////////////////



////////////////////////////////////////


////////////////////////////////////////



////////////////////////////////////////



////////////////////////////////////////


////////////////////////////////////////



////////////////////////////////////////



////////////////////////////////////////


////////////////////////////////////////



////////////////////////////////////////



////////////////////////////////////////


////////////////////////////////////////



////////////////////////////////////////



////////////////////////////////////////


////////////////////////////////////////



////////////////////////////////////////



////////////////////////////////////////


////////////////////////////////////////



////////////////////////////////////////



////////////////////////////////////////


////////////////////////////////////////



////////////////////////////////////////



////////////////////////////////////////


////////////////////////////////////////



////////////////////////////////////////



////////////////////////////////////////


////////////////////////////////////////



////////////////////////////////////////



////////////////////////////////////////


////////////////////////////////////////



////////////////////////////////////////



////////////////////////////////////////


////////////////////////////////////////



////////////////////////////////////////



////////////////////////////////////////


////////////////////////////////////////



////////////////////////////////////////



////////////////////////////////////////


////////////////////////////////////////



////////////////////////////////////////



////////////////////////////////////////


////////////////////////////////////////



////////////////////////////////////////



////////////////////////////////////////


////////////////////////////////////////



////////////////////////////////////////



////////////////////////////////////////


////////////////////////////////////////



////////////////////////////////////////



////////////////////////////////////////


////////////////////////////////////////



////////////////////////////////////////



////////////////////////////////////////


////////////////////////////////////////



////////////////////////////////////////



////////////////////////////////////////


////////////////////////////////////////



////////////////////////////////////////



////////////////////////////////////////


////////////////////////////////////////



////////////////////////////////////////



////////////////////////////////////////


////////////////////////////////////////



////////////////////////////////////////



////////////////////////////////////////


////////////////////////////////////////



////////////////////////////////////////



////////////////////////////////////////


////////////////////////////////////////



////////////////////////////////////////



////////////////////////////////////////


////////////////////////////////////////



////////////////////////////////////////



////////////////////////////////////////


////////////////////////////////////////



////////////////////////////////////////



////////////////////////////////////////


////////////////////////////////////////



////////////////////////////////////////



////////////////////////////////////////


////////////////////////////////////////



////////////////////////////////////////



////////////////////////////////////////


////////////////////////////////////////



////////////////////////////////////////



////////////////////////////////////////


////////////////////////////////////////



////////////////////////////////////////



////////////////////////////////////////


////////////////////////////////////////



////////////////////////////////////////



////////////////////////////////////////


////////////////////////////////////////



////////////////////////////////////////



////////////////////////////////////////


////////////////////////////////////////



////////////////////////////////////////



////////////////////////////////////////


////////////////////////////////////////



////////////////////////////////////////



////////////////////////////////////////


////////////////////////////////////////



////////////////////////////////////////



////////////////////////////////////////


////////////////////////////////////////



////////////////////////////////////////



////////////////////////////////////////


////////////////////////////////////////



////////////////////////////////////////



////////////////////////////////////////


////////////////////////////////////////



////////////////////////////////////////



////////////////////////////////////////


////////////////////////////////////////



////////////////////////////////////////



////////////////////////////////////////


////////////////////////////////////////



////////////////////////////////////////



////////////////////////////////////////


////////////////////////////////////////



////////////////////////////////////////



////////////////////////////////////////


////////////////////////////////////////



////////////////////////////////////////



////////////////////////////////////////


////////////////////////////////////////



////////////////////////////////////////



////////////////////////////////////////


////////////////////////////////////////



////////////////////////////////////////



////////////////////////////////////////


////////////////////////////////////////



////////////////////////////////////////



////////////////////////////////////////


////////////////////////////////////////



////////////////////////////////////////



////////////////////////////////////////


////////////////////////////////////////



////////////////////////////////////////



////////////////////////////////////////


////////////////////////////////////////



////////////////////////////////////////



////////////////////////////////////////


////////////////////////////////////////



////////////////////////////////////////



////////////////////////////////////////


////////////////////////////////////////



////////////////////////////////////////



////////////////////////////////////////


////////////////////////////////////////



////////////////////////////////////////



////////////////////////////////////////


////////////////////////////////////////



////////////////////////////////////////



////////////////////////////////////////


////////////////////////////////////////



////////////////////////////////////////



////////////////////////////////////////


////////////////////////////////////////



////////////////////////////////////////



////////////////////////////////////////


////////////////////////////////////////



////////////////////////////////////////



////////////////////////////////////////


////////////////////////////////////////



////////////////////////////////////////



////////////////////////////////////////


////////////////////////////////////////



////////////////////////////////////////



////////////////////////////////////////


////////////////////////////////////////



////////////////////////////////////////



////////////////////////////////////////


////////////////////////////////////////



////////////////////////////////////////



////////////////////////////////////////


////////////////////////////////////////



////////////////////////////////////////



////////////////////////////////////////


////////////////////////////////////////



////////////////////////////////////////



////////////////////////////////////////


////////////////////////////////////////



////////////////////////////////////////



////////////////////////////////////////


////////////////////////////////////////



////////////////////////////////////////



////////////////////////////////////////


////////////////////////////////////////



////////////////////////////////////////



////////////////////////////////////////


////////////////////////////////////////



////////////////////////////////////////



////////////////////////////////////////


////////////////////////////////////////



////////////////////////////////////////



////////////////////////////////////////


////////////////////////////////////////



////////////////////////////////////////



////////////////////////////////////////


////////////////////////////////////////



////////////////////////////////////////



////////////////////////////////////////


////////////////////////////////////////



////////////////////////////////////////



////////////////////////////////////////


////////////////////////////////////////



////////////////////////////////////////



////////////////////////////////////////


////////////////////////////////////////



////////////////////////////////////////



////////////////////////////////////////


////////////////////////////////////////



////////////////////////////////////////



////////////////////////////////////////


////////////////////////////////////////



////////////////////////////////////////



////////////////////////////////////////


////////////////////////////////////////



////////////////////////////////////////



////////////////////////////////////////


////////////////////////////////////////



////////////////////////////////////////



////////////////////////////////////////


////////////////////////////////////////



////////////////////////////////////////



////////////////////////////////////////


////////////////////////////////////////



////////////////////////////////////////



////////////////////////////////////////


////////////////////////////////////////



////////////////////////////////////////



////////////////////////////////////////


////////////////////////////////////////



////////////////////////////////////////



////////////////////////////////////////


////////////////////////////////////////



////////////////////////////////////////



////////////////////////////////////////


////////////////////////////////////////



////////////////////////////////////////



////////////////////////////////////////


////////////////////////////////////////



////////////////////////////////////////



////////////////////////////////////////


////////////////////////////////////////



////////////////////////////////////////



////////////////////////////////////////


////////////////////////////////////////



////////////////////////////////////////



////////////////////////////////////////


////////////////////////////////////////



////////////////////////////////////////



////////////////////////////////////////


////////////////////////////////////////



////////////////////////////////////////



////////////////////////////////////////


////////////////////////////////////////



////////////////////////////////////////



////////////////////////////////////////


////////////////////////////////////////



////////////////////////////////////////



////////////////////////////////////////


////////////////////////////////////////



////////////////////////////////////////



////////////////////////////////////////


////////////////////////////////////////



////////////////////////////////////////



////////////////////////////////////////


////////////////////////////////////////



////////////////////////////////////////



////////////////////////////////////////


////////////////////////////////////////



////////////////////////////////////////



////////////////////////////////////////


////////////////////////////////////////



////////////////////////////////////////



////////////////////////////////////////


////////////////////////////////////////



////////////////////////////////////////



////////////////////////////////////////


////////////////////////////////////////



////////////////////////////////////////



////////////////////////////////////////


////////////////////////////////////////



////////////////////////////////////////



////////////////////////////////////////


////////////////////////////////////////



////////////////////////////////////////



////////////////////////////////////////


////////////////////////////////////////



////////////////////////////////////////



////////////////////////////////////////


////////////////////////////////////////



////////////////////////////////////////



////////////////////////////////////////


////////////////////////////////////////



////////////////////////////////////////



////////////////////////////////////////


////////////////////////////////////////



////////////////////////////////////////



////////////////////////////////////////


////////////////////////////////////////



////////////////////////////////////////



////////////////////////////////////////


////////////////////////////////////////



////////////////////////////////////////



////////////////////////////////////////


////////////////////////////////////////



////////////////////////////////////////



////////////////////////////////////////


////////////////////////////////////////



////////////////////////////////////////



////////////////////////////////////////


////////////////////////////////////////



////////////////////////////////////////



////////////////////////////////////////


////////////////////////////////////////



////////////////////////////////////////



////////////////////////////////////////


////////////////////////////////////////



////////////////////////////////////////



////////////////////////////////////////


////////////////////////////////////////



////////////////////////////////////////



////////////////////////////////////////


////////////////////////////////////////



////////////////////////////////////////



////////////////////////////////////////


////////////////////////////////////////



////////////////////////////////////////



////////////////////////////////////////


////////////////////////////////////////



////////////////////////////////////////



////////////////////////////////////////


////////////////////////////////////////



////////////////////////////////////////



////////////////////////////////////////


////////////////////////////////////////



////////////////////////////////////////



////////////////////////////////////////


////////////////////////////////////////



////////////////////////////////////////



////////////////////////////////////////


////////////////////////////////////////



////////////////////////////////////////



////////////////////////////////////////


////////////////////////////////////////



////////////////////////////////////////



////////////////////////////////////////


////////////////////////////////////////



////////////////////////////////////////



////////////////////////////////////////


////////////////////////////////////////



////////////////////////////////////////



////////////////////////////////////////


////////////////////////////////////////



////////////////////////////////////////



////////////////////////////////////////


////////////////////////////////////////



////////////////////////////////////////



////////////////////////////////////////


////////////////////////////////////////



////////////////////////////////////////



////////////////////////////////////////


////////////////////////////////////////



////////////////////////////////////////



////////////////////////////////////////


////////////////////////////////////////



////////////////////////////////////////



////////////////////////////////////////


////////////////////////////////////////



////////////////////////////////////////



////////////////////////////////////////


////////////////////////////////////////



////////////////////////////////////////



////////////////////////////////////////


////////////////////////////////////////



////////////////////////////////////////



////////////////////////////////////////


////////////////////////////////////////



////////////////////////////////////////



////////////////////////////////////////


////////////////////////////////////////



////////////////////////////////////////



////////////////////////////////////////


////////////////////////////////////////



////////////////////////////////////////



////////////////////////////////////////


////////////////////////////////////////



////////////////////////////////////////



////////////////////////////////////////


////////////////////////////////////////



////////////////////////////////////////



////////////////////////////////////////


////////////////////////////////////////



////////////////////////////////////////



////////////////////////////////////////


////////////////////////////////////////



////////////////////////////////////////



////////////////////////////////////////


////////////////////////////////////////



////////////////////////////////////////



////////////////////////////////////////


////////////////////////////////////////



////////////////////////////////////////



////////////////////////////////////////


////////////////////////////////////////



////////////////////////////////////////



////////////////////////////////////////


////////////////////////////////////////



////////////////////////////////////////



////////////////////////////////////////


////////////////////////////////////////



////////////////////////////////////////



////////////////////////////////////////


////////////////////////////////////////



////////////////////////////////////////



////////////////////////////////////////


////////////////////////////////////////



////////////////////////////////////////



////////////////////////////////////////


////////////////////////////////////////



////////////////////////////////////////



////////////////////////////////////////


////////////////////////////////////////



////////////////////////////////////////



////////////////////////////////////////


////////////////////////////////////////



////////////////////////////////////////



////////////////////////////////////////


////////////////////////////////////////



////////////////////////////////////////



////////////////////////////////////////


////////////////////////////////////////



////////////////////////////////////////



////////////////////////////////////////


////////////////////////////////////////



////////////////////////////////////////



////////////////////////////////////////


////////////////////////////////////////



////////////////////////////////////////



////////////////////////////////////////


////////////////////////////////////////



////////////////////////////////////////



////////////////////////////////////////


////////////////////////////////////////



////////////////////////////////////////



////////////////////////////////////////


////////////////////////////////////////



////////////////////////////////////////



////////////////////////////////////////


////////////////////////////////////////



////////////////////////////////////////



////////////////////////////////////////


////////////////////////////////////////



////////////////////////////////////////



////////////////////////////////////////


////////////////////////////////////////



////////////////////////////////////////



////////////////////////////////////////


////////////////////////////////////////



////////////////////////////////////////



////////////////////////////////////////


////////////////////////////////////////



////////////////////////////////////////



////////////////////////////////////////


////////////////////////////////////////



////////////////////////////////////////



////////////////////////////////////////


////////////////////////////////////////



////////////////////////////////////////



////////////////////////////////////////


////////////////////////////////////////



////////////////////////////////////////



////////////////////////////////////////


////////////////////////////////////////



////////////////////////////////////////



////////////////////////////////////////


////////////////////////////////////////



////////////////////////////////////////



////////////////////////////////////////


////////////////////////////////////////



////////////////////////////////////////



////////////////////////////////////////


////////////////////////////////////////



////////////////////////////////////////



////////////////////////////////////////


////////////////////////////////////////



////////////////////////////////////////



////////////////////////////////////////


////////////////////////////////////////



////////////////////////////////////////



////////////////////////////////////////


////////////////////////////////////////



////////////////////////////////////////



////////////////////////////////////////


////////////////////////////////////////



////////////////////////////////////////



////////////////////////////////////////


////////////////////////////////////////



////////////////////////////////////////



////////////////////////////////////////


////////////////////////////////////////



////////////////////////////////////////



////////////////////////////////////////


////////////////////////////////////////



////////////////////////////////////////



////////////////////////////////////////


////////////////////////////////////////



////////////////////////////////////////



////////////////////////////////////////


////////////////////////////////////////



////////////////////////////////////////



////////////////////////////////////////


////////////////////////////////////////



////////////////////////////////////////



////////////////////////////////////////


////////////////////////////////////////



////////////////////////////////////////



////////////////////////////////////////


////////////////////////////////////////



////////////////////////////////////////



////////////////////////////////////////


////////////////////////////////////////



////////////////////////////////////////



////////////////////////////////////////


////////////////////////////////////////



////////////////////////////////////////



////////////////////////////////////////


////////////////////////////////////////



////////////////////////////////////////



////////////////////////////////////////


////////////////////////////////////////



////////////////////////////////////////



////////////////////////////////////////


////////////////////////////////////////



////////////////////////////////////////



////////////////////////////////////////


////////////////////////////////////////



////////////////////////////////////////



////////////////////////////////////////


////////////////////////////////////////



////////////////////////////////////////



////////////////////////////////////////


////////////////////////////////////////



////////////////////////////////////////



////////////////////////////////////////


////////////////////////////////////////



////////////////////////////////////////



////////////////////////////////////////


////////////////////////////////////////



////////////////////////////////////////



////////////////////////////////////////


////////////////////////////////////////



////////////////////////////////////////



////////////////////////////////////////


////////////////////////////////////////



////////////////////////////////////////



////////////////////////////////////////


////////////////////////////////////////



////////////////////////////////////////



////////////////////////////////////////


////////////////////////////////////////



////////////////////////////////////////



////////////////////////////////////////


////////////////////////////////////////



////////////////////////////////////////



////////////////////////////////////////


////////////////////////////////////////



////////////////////////////////////////



////////////////////////////////////////


////////////////////////////////////////



////////////////////////////////////////



////////////////////////////////////////


////////////////////////////////////////



////////////////////////////////////////



////////////////////////////////////////


////////////////////////////////////////



////////////////////////////////////////



////////////////////////////////////////


////////////////////////////////////////



////////////////////////////////////////



////////////////////////////////////////


////////////////////////////////////////



////////////////////////////////////////



////////////////////////////////////////


////////////////////////////////////////



////////////////////////////////////////



////////////////////////////////////////


////////////////////////////////////////



////////////////////////////////////////



////////////////////////////////////////


////////////////////////////////////////



////////////////////////////////////////



////////////////////////////////////////


////////////////////////////////////////



////////////////////////////////////////



////////////////////////////////////////


////////////////////////////////////////



////////////////////////////////////////



////////////////////////////////////////


////////////////////////////////////////



////////////////////////////////////////



////////////////////////////////////////


////////////////////////////////////////



////////////////////////////////////////



////////////////////////////////////////


////////////////////////////////////////



////////////////////////////////////////



////////////////////////////////////////


////////////////////////////////////////



////////////////////////////////////////



////////////////////////////////////////


////////////////////////////////////////



////////////////////////////////////////



////////////////////////////////////////


////////////////////////////////////////



////////////////////////////////////////



////////////////////////////////////////


////////////////////////////////////////



////////////////////////////////////////



////////////////////////////////////////


////////////////////////////////////////



////////////////////////////////////////



////////////////////////////////////////


////////////////////////////////////////



////////////////////////////////////////



////////////////////////////////////////


////////////////////////////////////////



////////////////////////////////////////



////////////////////////////////////////


////////////////////////////////////////



////////////////////////////////////////



////////////////////////////////////////


////////////////////////////////////////



////////////////////////////////////////



////////////////////////////////////////


////////////////////////////////////////



////////////////////////////////////////



////////////////////////////////////////


////////////////////////////////////////



////////////////////////////////////////



////////////////////////////////////////


////////////////////////////////////////



////////////////////////////////////////



////////////////////////////////////////


////////////////////////////////////////



////////////////////////////////////////



////////////////////////////////////////


////////////////////////////////////////



////////////////////////////////////////



////////////////////////////////////////


////////////////////////////////////////



////////////////////////////////////////



////////////////////////////////////////


////////////////////////////////////////



////////////////////////////////////////



////////////////////////////////////////


////////////////////////////////////////



////////////////////////////////////////



////////////////////////////////////////


////////////////////////////////////////



////////////////////////////////////////



////////////////////////////////////////


////////////////////////////////////////



////////////////////////////////////////



////////////////////////////////////////


////////////////////////////////////////



////////////////////////////////////////



////////////////////////////////////////


////////////////////////////////////////



////////////////////////////////////////



////////////////////////////////////////


////////////////////////////////////////



////////////////////////////////////////



////////////////////////////////////////


////////////////////////////////////////



////////////////////////////////////////



////////////////////////////////////////


////////////////////////////////////////



////////////////////////////////////////



////////////////////////////////////////


////////////////////////////////////////



////////////////////////////////////////



////////////////////////////////////////


////////////////////////////////////////



////////////////////////////////////////



////////////////////////////////////////


////////////////////////////////////////



////////////////////////////////////////



////////////////////////////////////////


////////////////////////////////////////



////////////////////////////////////////



////////////////////////////////////////


////////////////////////////////////////



////////////////////////////////////////



////////////////////////////////////////


////////////////////////////////////////



////////////////////////////////////////



////////////////////////////////////////


////////////////////////////////////////



////////////////////////////////////////



////////////////////////////////////////


////////////////////////////////////////



////////////////////////////////////////



////////////////////////////////////////


////////////////////////////////////////



////////////////////////////////////////



////////////////////////////////////////


////////////////////////////////////////



////////////////////////////////////////



////////////////////////////////////////


////////////////////////////////////////



////////////////////////////////////////



////////////////////////////////////////


////////////////////////////////////////



////////////////////////////////////////



////////////////////////////////////////


////////////////////////////////////////



////////////////////////////////////////



////////////////////////////////////////


////////////////////////////////////////



////////////////////////////////////////



////////////////////////////////////////


////////////////////////////////////////



////////////////////////////////////////



////////////////////////////////////////


////////////////////////////////////////



////////////////////////////////////////



////////////////////////////////////////


////////////////////////////////////////



////////////////////////////////////////



////////////////////////////////////////


////////////////////////////////////////



////////////////////////////////////////



////////////////////////////////////////


////////////////////////////////////////



////////////////////////////////////////



////////////////////////////////////////


////////////////////////////////////////



////////////////////////////////////////



////////////////////////////////////////


////////////////////////////////////////



////////////////////////////////////////



////////////////////////////////////////


////////////////////////////////////////



////////////////////////////////////////



////////////////////////////////////////


////////////////////////////////////////



////////////////////////////////////////



////////////////////////////////////////


////////////////////////////////////////



////////////////////////////////////////



////////////////////////////////////////


////////////////////////////////////////



////////////////////////////////////////



////////////////////////////////////////


////////////////////////////////////////



////////////////////////////////////////



////////////////////////////////////////


////////////////////////////////////////



////////////////////////////////////////



////////////////////////////////////////


////////////////////////////////////////



////////////////////////////////////////



////////////////////////////////////////


////////////////////////////////////////



////////////////////////////////////////



////////////////////////////////////////


////////////////////////////////////////



////////////////////////////////////////



////////////////////////////////////////


////////////////////////////////////////



////////////////////////////////////////



////////////////////////////////////////


////////////////////////////////////////



////////////////////////////////////////



////////////////////////////////////////


////////////////////////////////////////



////////////////////////////////////////



////////////////////////////////////////


////////////////////////////////////////



////////////////////////////////////////



////////////////////////////////////////


////////////////////////////////////////



////////////////////////////////////////



////////////////////////////////////////


////////////////////////////////////////



////////////////////////////////////////



////////////////////////////////////////


////////////////////////////////////////



////////////////////////////////////////



////////////////////////////////////////


////////////////////////////////////////



////////////////////////////////////////



////////////////////////////////////////


////////////////////////////////////////



////////////////////////////////////////



////////////////////////////////////////


////////////////////////////////////////



////////////////////////////////////////



////////////////////////////////////////


////////////////////////////////////////



////////////////////////////////////////



////////////////////////////////////////


////////////////////////////////////////



////////////////////////////////////////



////////////////////////////////////////


////////////////////////////////////////



////////////////////////////////////////



////////////////////////////////////////


////////////////////////////////////////



////////////////////////////////////////



////////////////////////////////////////


////////////////////////////////////////



////////////////////////////////////////



////////////////////////////////////////


////////////////////////////////////////



////////////////////////////////////////



////////////////////////////////////////


////////////////////////////////////////



////////////////////////////////////////



////////////////////////////////////////


////////////////////////////////////////



////////////////////////////////////////



////////////////////////////////////////


////////////////////////////////////////



////////////////////////////////////////



////////////////////////////////////////


////////////////////////////////////////



////////////////////////////////////////



////////////////////////////////////////


////////////////////////////////////////



////////////////////////////////////////



////////////////////////////////////////


////////////////////////////////////////



////////////////////////////////////////



////////////////////////////////////////


////////////////////////////////////////



////////////////////////////////////////



////////////////////////////////////////


////////////////////////////////////////



////////////////////////////////////////



////////////////////////////////////////


////////////////////////////////////////



////////////////////////////////////////



////////////////////////////////////////


////////////////////////////////////////



////////////////////////////////////////



////////////////////////////////////////


////////////////////////////////////////



////////////////////////////////////////



////////////////////////////////////////


////////////////////////////////////////



////////////////////////////////////////



////////////////////////////////////////


////////////////////////////////////////



////////////////////////////////////////



////////////////////////////////////////


////////////////////////////////////////



////////////////////////////////////////



////////////////////////////////////////


////////////////////////////////////////



////////////////////////////////////////



////////////////////////////////////////


////////////////////////////////////////



////////////////////////////////////////



////////////////////////////////////////


////////////////////////////////////////



////////////////////////////////////////



////////////////////////////////////////


////////////////////////////////////////



////////////////////////////////////////



////////////////////////////////////////


////////////////////////////////////////



////////////////////////////////////////



////////////////////////////////////////


////////////////////////////////////////



////////////////////////////////////////



////////////////////////////////////////


////////////////////////////////////////



////////////////////////////////////////



////////////////////////////////////////


////////////////////////////////////////



////////////////////////////////////////



////////////////////////////////////////


////////////////////////////////////////



////////////////////////////////////////



////////////////////////////////////////


////////////////////////////////////////



////////////////////////////////////////



////////////////////////////////////////


////////////////////////////////////////



////////////////////////////////////////



////////////////////////////////////////


////////////////////////////////////////



////////////////////////////////////////



////////////////////////////////////////


////////////////////////////////////////



////////////////////////////////////////



////////////////////////////////////////


////////////////////////////////////////



////////////////////////////////////////



////////////////////////////////////////


////////////////////////////////////////



////////////////////////////////////////



////////////////////////////////////////


////////////////////////////////////////



////////////////////////////////////////



////////////////////////////////////////


////////////////////////////////////////



////////////////////////////////////////



////////////////////////////////////////


////////////////////////////////////////



////////////////////////////////////////



////////////////////////////////////////


////////////////////////////////////////



////////////////////////////////////////



////////////////////////////////////////


////////////////////////////////////////



////////////////////////////////////////



////////////////////////////////////////


////////////////////////////////////////



////////////////////////////////////////



////////////////////////////////////////


////////////////////////////////////////



////////////////////////////////////////



////////////////////////////////////////


////////////////////////////////////////



////////////////////////////////////////



////////////////////////////////////////


////////////////////////////////////////



////////////////////////////////////////



////////////////////////////////////////


////////////////////////////////////////



////////////////////////////////////////



////////////////////////////////////////


////////////////////////////////////////



////////////////////////////////////////



////////////////////////////////////////


////////////////////////////////////////



////////////////////////////////////////



////////////////////////////////////////


////////////////////////////////////////



////////////////////////////////////////



////////////////////////////////////////


////////////////////////////////////////



////////////////////////////////////////



////////////////////////////////////////


////////////////////////////////////////



////////////////////////////////////////



////////////////////////////////////////


////////////////////////////////////////



////////////////////////////////////////



////////////////////////////////////////


////////////////////////////////////////



////////////////////////////////////////



////////////////////////////////////////


////////////////////////////////////////



////////////////////////////////////////



////////////////////////////////////////


////////////////////////////////////////



////////////////////////////////////////



////////////////////////////////////////


////////////////////////////////////////



////////////////////////////////////////



////////////////////////////////////////


////////////////////////////////////////



////////////////////////////////////////



////////////////////////////////////////


////////////////////////////////////////



////////////////////////////////////////



////////////////////////////////////////


////////////////////////////////////////



////////////////////////////////////////



////////////////////////////////////////


////////////////////////////////////////



////////////////////////////////////////



////////////////////////////////////////


////////////////////////////////////////



////////////////////////////////////////



////////////////////////////////////////


////////////////////////////////////////



////////////////////////////////////////



////////////////////////////////////////


////////////////////////////////////////



////////////////////////////////////////



////////////////////////////////////////


////////////////////////////////////////



////////////////////////////////////////



////////////////////////////////////////


////////////////////////////////////////



////////////////////////////////////////



////////////////////////////////////////


////////////////////////////////////////



////////////////////////////////////////



////////////////////////////////////////


////////////////////////////////////////



////////////////////////////////////////



////////////////////////////////////////


////////////////////////////////////////



////////////////////////////////////////



////////////////////////////////////////


////////////////////////////////////////



////////////////////////////////////////



////////////////////////////////////////


////////////////////////////////////////



////////////////////////////////////////



////////////////////////////////////////


////////////////////////////////////////



////////////////////////////////////////



////////////////////////////////////////


////////////////////////////////////////



////////////////////////////////////////



////////////////////////////////////////


////////////////////////////////////////



////////////////////////////////////////



////////////////////////////////////////


////////////////////////////////////////



////////////////////////////////////////



////////////////////////////////////////


////////////////////////////////////////



////////////////////////////////////////



////////////////////////////////////////


////////////////////////////////////////



////////////////////////////////////////



////////////////////////////////////////


////////////////////////////////////////



////////////////////////////////////////



////////////////////////////////////////


////////////////////////////////////////



////////////////////////////////////////



////////////////////////////////////////


////////////////////////////////////////



////////////////////////////////////////



////////////////////////////////////////


////////////////////////////////////////



////////////////////////////////////////



////////////////////////////////////////


////////////////////////////////////////



////////////////////////////////////////



////////////////////////////////////////


////////////////////////////////////////



////////////////////////////////////////



////////////////////////////////////////


////////////////////////////////////////



////////////////////////////////////////



////////////////////////////////////////


////////////////////////////////////////



////////////////////////////////////////



////////////////////////////////////////


////////////////////////////////////////



////////////////////////////////////////



////////////////////////////////////////


////////////////////////////////////////



////////////////////////////////////////



////////////////////////////////////////


////////////////////////////////////////



////////////////////////////////////////



////////////////////////////////////////


////////////////////////////////////////



////////////////////////////////////////



////////////////////////////////////////


////////////////////////////////////////



////////////////////////////////////////



////////////////////////////////////////


////////////////////////////////////////



////////////////////////////////////////



////////////////////////////////////////


////////////////////////////////////////



////////////////////////////////////////



////////////////////////////////////////


////////////////////////////////////////



////////////////////////////////////////



////////////////////////////////////////


////////////////////////////////////////



////////////////////////////////////////



////////////////////////////////////////


////////////////////////////////////////



////////////////////////////////////////



////////////////////////////////////////


////////////////////////////////////////



////////////////////////////////////////



////////////////////////////////////////


////////////////////////////////////////



////////////////////////////////////////



////////////////////////////////////////


////////////////////////////////////////



////////////////////////////////////////



////////////////////////////////////////


////////////////////////////////////////



////////////////////////////////////////



////////////////////////////////////////


////////////////////////////////////////



////////////////////////////////////////



////////////////////////////////////////


////////////////////////////////////////



////////////////////////////////////////



////////////////////////////////////////


////////////////////////////////////////



////////////////////////////////////////



////////////////////////////////////////


////////////////////////////////////////



////////////////////////////////////////



////////////////////////////////////////


////////////////////////////////////////



////////////////////////////////////////



////////////////////////////////////////


////////////////////////////////////////



////////////////////////////////////////



////////////////////////////////////////


////////////////////////////////////////



////////////////////////////////////////



////////////////////////////////////////


////////////////////////////////////////



////////////////////////////////////////



////////////////////////////////////////


////////////////////////////////////////



////////////////////////////////////////



////////////////////////////////////////


////////////////////////////////////////



////////////////////////////////////////



////////////////////////////////////////


////////////////////////////////////////



////////////////////////////////////////



////////////////////////////////////////


////////////////////////////////////////



////////////////////////////////////////



////////////////////////////////////////


////////////////////////////////////////



////////////////////////////////////////



////////////////////////////////////////


////////////////////////////////////////



////////////////////////////////////////



////////////////////////////////////////


////////////////////////////////////////



////////////////////////////////////////



////////////////////////////////////////


////////////////////////////////////////



////////////////////////////////////////



////////////////////////////////////////


////////////////////////////////////////



////////////////////////////////////////



////////////////////////////////////////


////////////////////////////////////////



////////////////////////////////////////



////////////////////////////////////////


////////////////////////////////////////



////////////////////////////////////////



////////////////////////////////////////


////////////////////////////////////////



////////////////////////////////////////



////////////////////////////////////////


////////////////////////////////////////



////////////////////////////////////////



////////////////////////////////////////


////////////////////////////////////////



////////////////////////////////////////



////////////////////////////////////////


////////////////////////////////////////



////////////////////////////////////////



////////////////////////////////////////


////////////////////////////////////////



////////////////////////////////////////



////////////////////////////////////////


////////////////////////////////////////



////////////////////////////////////////



////////////////////////////////////////


////////////////////////////////////////



////////////////////////////////////////



////////////////////////////////////////


////////////////////////////////////////



////////////////////////////////////////



////////////////////////////////////////


////////////////////////////////////////



////////////////////////////////////////



////////////////////////////////////////


////////////////////////////////////////



////////////////////////////////////////



////////////////////////////////////////


////////////////////////////////////////



////////////////////////////////////////



////////////////////////////////////////


////////////////////////////////////////



////////////////////////////////////////



////////////////////////////////////////


////////////////////////////////////////



////////////////////////////////////////



////////////////////////////////////////


////////////////////////////////////////



////////////////////////////////////////



////////////////////////////////////////


////////////////////////////////////////



////////////////////////////////////////



////////////////////////////////////////


////////////////////////////////////////



////////////////////////////////////////



////////////////////////////////////////


////////////////////////////////////////



////////////////////////////////////////



////////////////////////////////////////


////////////////////////////////////////



////////////////////////////////////////



////////////////////////////////////////


////////////////////////////////////////



////////////////////////////////////////



////////////////////////////////////////


////////////////////////////////////////



////////////////////////////////////////



////////////////////////////////////////


////////////////////////////////////////



////////////////////////////////////////



////////////////////////////////////////


////////////////////////////////////////



////////////////////////////////////////



////////////////////////////////////////


////////////////////////////////////////



////////////////////////////////////////



////////////////////////////////////////


////////////////////////////////////////



////////////////////////////////////////



////////////////////////////////////////


////////////////////////////////////////



////////////////////////////////////////



////////////////////////////////////////


////////////////////////////////////////



////////////////////////////////////////



////////////////////////////////////////


////////////////////////////////////////



////////////////////////////////////////



////////////////////////////////////////


////////////////////////////////////////



////////////////////////////////////////



////////////////////////////////////////


////////////////////////////////////////



////////////////////////////////////////



////////////////////////////////////////


////////////////////////////////////////



////////////////////////////////////////



////////////////////////////////////////


////////////////////////////////////////



////////////////////////////////////////



////////////////////////////////////////


////////////////////////////////////////



////////////////////////////////////////



////////////////////////////////////////


////////////////////////////////////////



////////////////////////////////////////



////////////////////////////////////////


////////////////////////////////////////



////////////////////////////////////////



////////////////////////////////////////


////////////////////////////////////////



////////////////////////////////////////



////////////////////////////////////////


////////////////////////////////////////



////////////////////////////////////////



////////////////////////////////////////


////////////////////////////////////////



////////////////////////////////////////



////////////////////////////////////////


////////////////////////////////////////



////////////////////////////////////////



////////////////////////////////////////


////////////////////////////////////////



////////////////////////////////////////



////////////////////////////////////////


////////////////////////////////////////



////////////////////////////////////////



////////////////////////////////////////


////////////////////////////////////////



////////////////////////////////////////



////////////////////////////////////////


////////////////////////////////////////



////////////////////////////////////////



////////////////////////////////////////


////////////////////////////////////////



////////////////////////////////////////



////////////////////////////////////////


////////////////////////////////////////



////////////////////////////////////////



////////////////////////////////////////


////////////////////////////////////////



////////////////////////////////////////



////////////////////////////////////////


////////////////////////////////////////



////////////////////////////////////////



////////////////////////////////////////


////////////////////////////////////////



////////////////////////////////////////



////////////////////////////////////////


////////////////////////////////////////



////////////////////////////////////////



////////////////////////////////////////


////////////////////////////////////////



////////////////////////////////////////



////////////////////////////////////////


////////////////////////////////////////



////////////////////////////////////////



////////////////////////////////////////


////////////////////////////////////////



////////////////////////////////////////



////////////////////////////////////////


////////////////////////////////////////



////////////////////////////////////////



////////////////////////////////////////


////////////////////////////////////////



////////////////////////////////////////



////////////////////////////////////////


////////////////////////////////////////



////////////////////////////////////////



////////////////////////////////////////


////////////////////////////////////////



////////////////////////////////////////



////////////////////////////////////////


////////////////////////////////////////



////////////////////////////////////////



////////////////////////////////////////


////////////////////////////////////////



////////////////////////////////////////



////////////////////////////////////////


////////////////////////////////////////



////////////////////////////////////////



////////////////////////////////////////


////////////////////////////////////////



////////////////////////////////////////



////////////////////////////////////////


////////////////////////////////////////



////////////////////////////////////////



////////////////////////////////////////


////////////////////////////////////////



////////////////////////////////////////



////////////////////////////////////////


////////////////////////////////////////



////////////////////////////////////////



////////////////////////////////////////


////////////////////////////////////////



////////////////////////////////////////



////////////////////////////////////////


////////////////////////////////////////



////////////////////////////////////////



////////////////////////////////////////


////////////////////////////////////////



////////////////////////////////////////



////////////////////////////////////////


////////////////////////////////////////



////////////////////////////////////////



////////////////////////////////////////


////////////////////////////////////////



////////////////////////////////////////



////////////////////////////////////////


////////////////////////////////////////



////////////////////////////////////////



////////////////////////////////////////


////////////////////////////////////////



////////////////////////////////////////



////////////////////////////////////////


////////////////////////////////////////



////////////////////////////////////////



////////////////////////////////////////


////////////////////////////////////////



////////////////////////////////////////



////////////////////////////////////////


////////////////////////////////////////



////////////////////////////////////////



////////////////////////////////////////


////////////////////////////////////////



////////////////////////////////////////



////////////////////////////////////////


////////////////////////////////////////



////////////////////////////////////////



////////////////////////////////////////


////////////////////////////////////////



////////////////////////////////////////



////////////////////////////////////////


////////////////////////////////////////



////////////////////////////////////////



////////////////////////////////////////


////////////////////////////////////////



////////////////////////////////////////



////////////////////////////////////////


////////////////////////////////////////



////////////////////////////////////////



////////////////////////////////////////


////////////////////////////////////////



////////////////////////////////////////



////////////////////////////////////////


////////////////////////////////////////



////////////////////////////////////////



////////////////////////////////////////


////////////////////////////////////////



////////////////////////////////////////



////////////////////////////////////////


////////////////////////////////////////



////////////////////////////////////////



////////////////////////////////////////


////////////////////////////////////////



////////////////////////////////////////



////////////////////////////////////////


////////////////////////////////////////



////////////////////////////////////////



////////////////////////////////////////


////////////////////////////////////////



////////////////////////////////////////



////////////////////////////////////////


////////////////////////////////////////



////////////////////////////////////////



////////////////////////////////////////


////////////////////////////////////////



////////////////////////////////////////



////////////////////////////////////////


////////////////////////////////////////



////////////////////////////////////////



////////////////////////////////////////


////////////////////////////////////////



////////////////////////////////////////



////////////////////////////////////////


////////////////////////////////////////



////////////////////////////////////////



////////////////////////////////////////


////////////////////////////////////////



////////////////////////////////////////



////////////////////////////////////////


////////////////////////////////////////



////////////////////////////////////////



////////////////////////////////////////


////////////////////////////////////////



////////////////////////////////////////



////////////////////////////////////////


////////////////////////////////////////



////////////////////////////////////////



////////////////////////////////////////


////////////////////////////////////////



////////////////////////////////////////



////////////////////////////////////////


////////////////////////////////////////



////////////////////////////////////////



////////////////////////////////////////


////////////////////////////////////////



////////////////////////////////////////



////////////////////////////////////////


////////////////////////////////////////



////////////////////////////////////////



////////////////////////////////////////


////////////////////////////////////////



////////////////////////////////////////



////////////////////////////////////////


////////////////////////////////////////



////////////////////////////////////////



////////////////////////////////////////


////////////////////////////////////////



////////////////////////////////////////



////////////////////////////////////////


////////////////////////////////////////



////////////////////////////////////////



////////////////////////////////////////


////////////////////////////////////////



////////////////////////////////////////



////////////////////////////////////////


////////////////////////////////////////



////////////////////////////////////////



////////////////////////////////////////


////////////////////////////////////////



////////////////////////////////////////



////////////////////////////////////////


////////////////////////////////////////



////////////////////////////////////////



////////////////////////////////////////


////////////////////////////////////////



////////////////////////////////////////



////////////////////////////////////////


////////////////////////////////////////



////////////////////////////////////////



////////////////////////////////////////


////////////////////////////////////////



////////////////////////////////////////



////////////////////////////////////////
